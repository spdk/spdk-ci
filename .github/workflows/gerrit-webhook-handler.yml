---
name: SPDK per-patch tests

# Pull request - "SPDK-CI: PR#123: Example Title"
# Workflow dispatch - "Manual: (12345/5)Example Gerrit Subject"
# Repository dispatch - "(12345/5)Example Gerrit Subject"
run-name: >-
  ${{
    github.event_name == 'pull_request' && format('SPDK-CI: PR#{0}: {1}',
       github.event.pull_request.number, github.event.pull_request.title)
    || github.event_name == 'workflow_dispatch' && inputs.client_payload != '' && format('Manual: ({0}/{1}){2}',
       fromJson(inputs.client_payload).change.number, fromJson(inputs.client_payload).patchSet.number, fromJson(inputs.client_payload).change.subject)
    || github.event_name == 'workflow_dispatch' && inputs.client_payload == '' && format('Manual: SPDK master')
    || github.event_name == 'repository_dispatch' && github.event.client_payload != '' && format('({0}/{1}){2}',
       fromJson(github.event.client_payload).change.number, fromJson(github.event.client_payload).patchSet.number, fromJson(github.event.client_payload).change.subject)
  }}

on:
  pull_request:
    paths-ignore:
    - '.github/workflows/selftest.yml'
    - '.github/workflows/build_qcow2.yml'
    - 'infra/**'
  workflow_dispatch:
    inputs:
      client_payload:
        required: false
        type: string
        default: ''
  repository_dispatch:
    types:
    - per-patch-event
    - patchset-created
    - wip-state-changed
    - private-state-changed

env:
  # TODO: Renable client_payload for workflow_dispatch
  client_payload: ${{ github.event.client_payload != '' && toJson(github.event.client_payload) || '' }}

jobs:
  env_vars: # Workaround for https://github.com/actions/runner/issues/2372
    name: Setup enviroment
    runs-on: ubuntu-latest
    outputs:
      client_payload: ${{ env.client_payload }}
    steps:
    - run: echo "Passing workflow env vars to reusable workflows"

  patch_set_status:
    name: Verify patch set state
    needs: env_vars
    runs-on: ubuntu-latest
    if: ${{ needs.env_vars.outputs.client_payload }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - name: Check patch set status
      run: |
        set -e
        set -x

        change_num="${{ fromJSON(needs.env_vars.outputs.client_payload).change.number }}"
        patch_set="${{ fromJSON(needs.env_vars.outputs.client_payload).patchSet.number }}"
        title="${{ fromJSON(needs.env_vars.outputs.client_payload).change.subject }}"

        echo "SPDK: ($change_num/$patch_set)$title" >> $GITHUB_STEP_SUMMARY
        echo "Gerrit: <https://review.spdk.io/c/spdk/spdk/+/$change_num/$patch_set>" >> $GITHUB_STEP_SUMMARY

        # Get latest info about a change itself
        curl -s -X GET "https://review.spdk.io/changes/spdk%2Fspdk~$change_num?o=DETAILED_ACCOUNTS&o=LABELS&o=SKIP_DIFFSTAT" \
        | tail -n +2 >  change.json

        if [[ ! -s change.json ]]; then
          echo "Change $change_num not found, exiting." >> $GITHUB_STEP_SUMMARY
          echo "Either it's a private change or in restricted branch." >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Do not test any change marked as WIP
        # .work_in_progress is not set when false
        work_in_progress="$(jq -r '.work_in_progress' change.json)"
        if [[ "$work_in_progress" == "true" ]]; then
          echo "Ignore. Patch is currently WIP." >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Only test latest patch set
        current_patch_set="$(jq -r '.current_revision_number' change.json)"
        if ((current_patch_set != $patch_set)); then
          echo "Ignore. Patch set $patch_set is not the latest." >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

        # Test only changes without a Verified vote already present
        verified=$(jq -r ".labels.Verified.all[]? | select(.username==\"${{ secrets.GERRIT_BOT_USER }}\").value" change.json)
        if ((verified != 0)); then
          echo "Ignore. Patch already has a vote from CI." >> $GITHUB_STEP_SUMMARY
          gh run cancel ${{ github.run_id }} -R ${{ github.repository }}
        fi

  common:
    name: Common tests
    if: ${{ !cancelled() }}
    needs:
    - env_vars
    - patch_set_status
    uses: ./.github/workflows/spdk-common-tests.yml
    with:
      # "Client payload" is all of the information Gerrit webhooks sends out.
      client_payload: ${{ needs.env_vars.outputs.client_payload }}

  hpe:
    name: NVMe-oF RDMA tests
    if: ${{ !cancelled() }}
    needs:
    - env_vars
    - patch_set_status
    uses: ./.github/workflows/nvmf-rdma.yml
    with:
      client_payload: ${{ needs.env_vars.outputs.client_payload }}
  # Add more jobs below if needed.


  # Summary should be last job, please make sure to include yours in 'needs'.
  summary:
    name: Job summary
    if: ${{ !cancelled() }}
    needs:
    - env_vars
    - patch_set_status
    - common
    - hpe
    uses: ./.github/workflows/summary.yml
    with:
      client_payload: ${{ needs.env_vars.outputs.client_payload }}
      result: ${{ needs.common.result }}
    secrets: inherit
