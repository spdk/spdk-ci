---
# Create a .qcow2 Image with Cloud-Init and SPDK Setup Scripts
#
# This GitHub Actions (GHA) workflow automates the creation of a `.qcow2` image 
# using `cloud-init`, along with `pkgdep.sh` and `autotest_setup.sh` from SPDK.
#
# Technologies Used:
# - qemu
# - cloud-init
# - cijoe
#
# The workflow delegates most of the logic to the CIJOE workflow. Refer to the 
# report generated by CIJOE for a comprehensive log of executed tasks, including 
# detailed descriptions of scripts and workflow steps.
#
# By relying on CIJOE for the majority of the logic, this approach:
#
# - Simplifies testing and development, as the logic can be run locally 
#   (e.g., in a lab or on a workstation/laptop).
# - Enables reusability in other CI/CD pipelines, such as GitLab.
#
# Purpose:
# 1. Prepare the input for the CIJOE workflow.
# 2. Collect artifacts produced during execution.
# 3. Integrate with third-party services, such as S3.
#
name: SPDK-CI build VM image

on:
  workflow_dispatch:
    inputs:
      gerrit_ref:
        description: 'Reference to specific Gerrit patch set'
        required: false
        default: ''
      distro:
        description: 'Distribution name_ver to build qcow2 image for'
        required: false
        type: choice
        options:
        - fedora_40
        - freebsd_14
        default: 'fedora_40'
  push:
    branches: ["main"]
    paths:
    - '.github/workflows/build_qcow2.yml'
    - 'cijoe/configs/qemuhost-with-guest-*.toml'
    - 'cijoe/workflows/build_*_qcow2_using_qemu.yaml'

jobs:
  determine-distros:
    runs-on: ubuntu-latest
    outputs:
      distro: ${{ steps.set-distro.outputs.distro }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 2
    - name: Determine distros to build
      id: set-distro
      # If triggered by workflow_dispatch, build the input distro selected by the user.
      # It's a single choice input so we don't need to do any additional checks.
      # If triggered by a push event, build all of the distros which may have been affected
      # by the change.
      # * .github/workflows/build_qcow2.yml - main workflow changed, build all supported distros
      # * cijoe/configs/*.toml or cijoe/workflows/*.yaml - configration changed, add affected distro
      #   to the list of distros to build.
      run: |
        distros_to_build=()
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          distros_to_build+=("${{ inputs.distro }}")
        else
          changed_files=$(git diff --name-only HEAD~1 HEAD)

          if grep -q '.github/workflows/build_qcow2.yml' <<< $changed_files; then
            for conf in cijoe/workflows/build_*_qcow2_using_qemu.yaml; do
                distro=$(basename "$conf" | sed -E 's/build_(.*)_qcow2_using_qemu\.yaml/\1/')
                distros_to_build+=("$distro")
            done
          else
            for file in $changed_files; do
              if [[ $file == cijoe/configs/qemuhost-with-guest-*.toml ]]; then
                distro=$(basename "$file" | sed -E 's/qemuhost-with-guest-(.*)\.toml/\1/')
              elif [[ $file == cijoe/workflows/build_*_qcow2_using_qemu.yaml ]]; then
                distro=$(basename "$file" | sed -E 's/build_(.*)_qcow2_using_qemu\.yaml/\1/')
              fi
              distros_to_build+=("$distro")
            done
          fi
        fi
        printf -v joined_distros '\"%s\",' ${distros_to_build[@]}
        echo "Distros to build: ${joined_distros%,}"
        echo "distro=[${joined_distros%,}]" >> $GITHUB_OUTPUT

  source-archive:
    needs: determine-distros
    runs-on: ubuntu-latest

    concurrency:
      group: build_qcow2_source_archive
      cancel-in-progress: false

    steps:
    - name: Checkout the spdk-ci repo locally
      uses: actions/checkout@v4.1.7
    - name: Checkout SPDK repository via GitHUB
      uses: ./.github/actions/checkout_gerrit
      with:
        gerrit_ref: ${{ github.event.inputs.gerrit_ref }}
        spdk_path: spdk

    - name: Create a tarball, of the repository, to preserve file permissions
      run: |
        tar -C spdk -czf ./spdk.tar.gz .

    - name: Upload the repository as an artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: repo-spdk
        path: spdk.tar.gz

  build-qcow2:
    needs:
    - determine-distros
    - source-archive
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ${{ fromJson(needs.determine-distros.outputs.distro) }}
    container:
      image: ghcr.io/refenv/cijoe-docker:v0.9.54
      options: >
        --device=/dev/kvm
        --device=/dev/fuse
        --cap-add=SYS_ADMIN
        --security-opt apparmor=unconfined

    env:
      REPOSITORY_TARBALL_PATH: ${{ github.workspace }}/spdk.tar.gz

    concurrency:
      group: ${{ format('build_{0}_qcow2', matrix.distro) }}
      cancel-in-progress: false

    steps:
    - name: Download the repository
      uses: actions/download-artifact@v4.1.8
      with:
        name: repo-spdk

    - name: Checkout CI repository
      uses: actions/checkout@v4.1.7
      with:
        path: ci

    - name: Build
      run: |
        cd ci/cijoe
        cijoe \
        --monitor \
        --config configs/qemuhost-with-guest-${{ matrix.distro }}.toml \
        --workflow workflows/build_${{ matrix.distro }}_qcow2_using_qemu.yaml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        path: ci/cijoe/cijoe-output
        name: cijoe-cloudinit-report

    - name: Change image format and compress
      run: |
        qemu-img convert $HOME/guests/generic-bios-kvm-x86_64/boot.img ${{ matrix.distro }}_x86_64.qcow2 -O qcow2 -c

    - name: Store Qcow2 build artifacts
      uses: actions/upload-artifact@v4.4.0
      with:
        name: vm-image-${{ matrix.distro }}_x86_64
        compression-level: 0
        path: ${{ matrix.distro }}_x86_64.qcow2

  cache-qcow2:
    needs:
    - determine-distros
    - build-qcow2
    runs-on: ubuntu-latest

    strategy:
      matrix:
        distro: ${{ fromJson(needs.determine-distros.outputs.distro) }}

    steps:
    - name: Download VM Qcow2 image artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: vm-image-${{ matrix.distro }}_x86_64

    - name: Delete previous cache
      run: |
        gh extension install actions/gh-actions-cache
        if gh actions-cache list --repo ${{ github.repository }} | grep -q "vm-image-${{ matrix.distro }}_x86_64"; then
          gh actions-cache delete "vm-image-${{ matrix.distro }}_x86_64" --repo ${{ github.repository }} --confirm
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cache qcow2 image
      id: cache-qcow2
      uses: actions/cache/save@v4
      with:
        path: ${{ matrix.distro }}_x86_64.qcow2
        key: vm-image-${{ matrix.distro }}_x86_64
