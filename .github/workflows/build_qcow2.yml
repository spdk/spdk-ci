---
# Create a .qcow2 Image with Cloud-Init and SPDK Setup Scripts
#
# This GitHub Actions (GHA) workflow automates the creation of a `.qcow2` image 
# using `cloud-init`, along with `pkgdep.sh` and `autotest_setup.sh` from SPDK.
#
# Technologies Used:
# - qemu
# - cloud-init
# - cijoe
#
# The workflow delegates most of the logic to the CIJOE workflow. Refer to the 
# report generated by CIJOE for a comprehensive log of executed tasks, including 
# detailed descriptions of scripts and workflow steps.
#
# By relying on CIJOE for the majority of the logic, this approach:
#
# - Simplifies testing and development, as the logic can be run locally 
#   (e.g., in a lab or on a workstation/laptop).
# - Enables reusability in other CI/CD pipelines, such as GitLab.
#
# Purpose:
# 1. Prepare the input for the CIJOE workflow.
# 2. Collect artifacts produced during execution.
# 3. Integrate with third-party services, such as S3.
#
name: build_qcow2

on:
  workflow_dispatch:
    inputs:
      gerrit_ref:
        description: 'Reference to specific Gerrit patch set'
        required: false
        default: ''
  push:
    branches: ["main"]
    paths:
    - 'cijoe/configs/qemuhost-with-guest-fedora-40.toml'
    - 'cijoe/workflows/build_qcow2_using_qemu.yaml'

jobs:

  source-archive:
    runs-on: ubuntu-latest

    concurrency:
      group: build_qcow2
      cancel-in-progress: false

    steps:
    - name: Checkout the spdk-ci repo locally
      uses: actions/checkout@v4.1.7
    - name: Checkout SPDK repository via GitHUB
      uses: ./.github/actions/checkout_gerrit
      with:
        gerrit_ref: ${{ github.event.inputs.gerrit_ref }}
        spdk_path: spdk

    - name: Create a tarball, of the repository, to preserve file permissions
      run: |
        tar -C spdk -czf ./repository.tar.gz .

    - name: Upload the repository as an artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: repository
        path: repository.tar.gz

  build-qcow2:
    needs: source-archive
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/refenv/cijoe-docker:v0.9.50
      options: >
        --device=/dev/kvm
        --device=/dev/fuse
        --cap-add=SYS_ADMIN
        --security-opt apparmor=unconfined

    env:
      REPOSITORY_TARBALL_PATH: ${{ github.workspace }}/repository.tar.gz

    concurrency:
      group: build_qcow2
      cancel-in-progress: false

    steps:
    - name: Download the repository
      uses: actions/download-artifact@v4.1.8
      with:
        name: repository

    - name: Checkout CI repository
      uses: actions/checkout@v4.1.7
      with:
        path: ci

    - name: Build
      run: |
        cd ci/cijoe
        cijoe \
        --monitor \
        --config configs/qemuhost-with-guest-fedora-40.toml \
        --workflow workflows/build_qcow2_using_qemu.yaml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        path: ci/cijoe/cijoe-output
        name: cloudinit-report

    - name: Change image format and compress
      run: |
        for i in $(seq 1 60); do test -f "$HOME/guests/generic-bios-kvm-x86_64/guest.pid" || break; sleep 1; done
        qemu-img convert $HOME/guests/generic-bios-kvm-x86_64/boot.img fedora_40_x86_64.qcow2 -O qcow2 -c

    - name: Store Qcow2 build artifacts
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        name: qcow2-build-artifacts
        compression-level: 0
        overwrite: true
        path: |
          ci/cijoe/cijoe-output
          fedora_40_x86_64.qcow2

    - name: Cache qcow2 image
      id: cache-qcow2
      uses: actions/cache/save@v4
      with:
        path: |
          fedora_40_x86_64.qcow2
        key: fedora_40_x86_64
