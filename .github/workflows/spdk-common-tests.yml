---
name: SPDK per-patch common tests

# Workflow intended to run tests which can be executed using standard
# Github runners, without any hardware-specific dependencies.

on:
  workflow_dispatch:
    inputs:
      gerrit_ref:
        description: 'Gerrit refspec to test following refs/changes/${change_number: -2}/${change_number}/${patch_set} format'
        required: false
        type: string
        default: ''
  workflow_call:
    inputs:
      client_payload:
        required: false
        type: string
        default: ''
      changed_files:
        required: false
        type: string
        default: ''

env:
  spdk_path: './spdk'
jobs:
  checkout_spdk:
    runs-on: ubuntu-latest
    env:
      gerrit_ref: ${{ inputs.client_payload != '' && fromJson(inputs.client_payload).patchSet.ref || inputs.gerrit_ref }}
    steps:
      # Required to use locally defined actions
    - name: Checkout the spdk-ci repo locally
      uses: actions/checkout@v4.1.7
    - name: Prepare SPDK repo by checking out from Gerrit
      uses: ./.github/actions/checkout_gerrit
      with:
        gerrit_ref: ${{ env.gerrit_ref }}
        spdk_path: ${{ env.spdk_path }}
    - name: Create repository tarball
      run: tar -C ${{ env.spdk_path }} -czf spdk.tar.gz .
    - name: Upload the repository tarball as an artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: repo-spdk
        path: spdk.tar.gz

    - name: Checkout the spdk-abi repo
      uses: actions/checkout@v4.1.7
      with:
        repository: 'spdk/spdk-abi'
        path: './spdk-abi'
        fetch-depth: '0'
        fetch-tags: 'true'
    - name: Create abi tarball
      run: tar -C './spdk-abi' -czf spdk-abi.tar.gz .
    - name: Upload the abi tarball as an artifact
      uses: actions/upload-artifact@v4.4.0
      with:
        name: repo-spdk-abi
        path: spdk-abi.tar.gz

  select_vm_image:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - name: Select latest qcow2 artifact
      id: get_artifact_id
      # TODO: make it a composite action for reuse
      run: |
        set -x
        fedora_40=$(gh api --paginate "/repos/${{ github.repository }}/actions/artifacts?name=vm-image-fedora_40_x86_64" -q '.artifacts |= sort_by(.updated_at)[-1] | .artifacts.workflow_run.id')
        freebsd_14=$(gh api --paginate "/repos/${{ github.repository }}/actions/artifacts?name=vm-image-freebsd_14_x86_64" -q '.artifacts |= sort_by(.updated_at)[-1] | .artifacts.workflow_run.id')
        [[ -z "${fedora_40}" ]] && echo "fedora_40 is empty" && exit 1
        [[ -z "${freebsd_14}" ]] && echo "freebsd_14 is empty" && exit 1
        echo "artifact_id={'fedora_40':$fedora_40,'freebsd_14':$freebsd_14}" >> "$GITHUB_OUTPUT"
    outputs:
      artifact_id: ${{ steps.get_artifact_id.outputs.artifact_id }}

  distros-container:
    if: contains(inputs.changed_files, 'pkgdep')
    needs:
    - checkout_spdk
    strategy:
      matrix:
        # Keep latest 2 versions of each flavor here
        distro:
        - quay.io/centos/centos:9
        - quay.io/centos/centos:10
        - docker.io/rockylinux/rockylinux:9
        - docker.io/rockylinux/rockylinux:10
        - docker.io/library/ubuntu:20.04
        - docker.io/library/ubuntu:22.04
        - docker.io/library/ubuntu:24.04
        - docker.io/library/fedora:42
        - docker.io/library/fedora:43
        - docker.io/library/debian:12.12
        - docker.io/library/debian:11.11
        - docker.io/opensuse/leap:15.6
        # - docker.io/opensuse/leap:16.0
        # - mcr.microsoft.com/azurelinux/base/core:3.0
        # - docker.io/library/archlinux:base-20250907.0.417472
        include:
        # TODO: consider also [macos-latest, windows-2022]
        - os: ubuntu-22.04-arm
          distro: ""   # no container for this one
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    container: ${{ matrix.distro != '' && matrix.distro || null }}
    steps:
    - uses: actions/download-artifact@v4.1.8
      with:
        name: repo-spdk
    - if: contains(matrix.distro, 'ubuntu') || contains(matrix.distro, 'debian')
      run: apt-get update
    - if: matrix.distro == 'docker.io/opensuse/leap:15.6'
      run: zypper install -y tar gzip
    - shell: bash
      env:
        TZ: Etc/UTC
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -x
        tar xzf spdk.tar.gz --strip 1
        # TODO: consider 'autorun.sh' or 'autobuild.sh' or 'autotest.sh'
        ${{ matrix.distro == '' && 'sudo' || '' }} ./scripts/pkgdep.sh --all
        ./configure --enable-coverage \
            --without-uring \
            --without-fio \
            --without-rbd \
            --without-rdma \
            --without-shared \
            --without-iscsi-initiator \
            --without-vtune \
            --without-vfio-user
        source ./scripts/common.sh
        make -j

  autorun:
    name: ${{ matrix.workflow }}
    needs:
    - checkout_spdk
    - select_vm_image
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        workflow:
        - nvme-vm-autotest
        - raid-vm-autotest
        - bdev-vm-autotest
        - nvmf-tcp-vm-autotest
        - nvmf-tcp-uring-vm-autotest
        - iscsi-vm-autotest
        - iscsi-uring-vm-autotest
        - unittest-gcc-container-autotest
        - unittest-clang-container-autotest
        - unittest-valgrind-container-autotest
        - check-format-container-autotest
        - release-build-gcc-container-autotest
        - release-build-clang-container-autotest
        - doc-container-autotest
        - build-files-container-autotest
        - scan-build-container-autotest
        - check-so-deps-container-autotest
        - short-fuzz-phy-autotest
        include:
        - nvme_setup: "zns"
        - distro: "fedora_40"
        - workflow: ftl-vm-autotest
          nvme_setup: "ftl"
          distro: "fedora_40"
        - workflow: freebsd-vm-autotest
          nvme_setup: "default"
          distro: "freebsd_14"
    env:
      REPOSITORY_TARBALL_PATH: ${{ github.workspace }}/spdk.tar.gz
      ABI_TARBALL_PATH: ${{ github.workspace }}/spdk-abi.tar.gz
      CI_CFGS_REPOSITORY_PATH: ${{ github.workspace }}/ci/cijoe/configs/autorun_configs
      NVME_SETUP: ${{ matrix.nvme_setup }}
      DISTRO: ${{ matrix.distro }}
    container:
      image: ghcr.io/refenv/cijoe-docker:v0.9.54
      options: --device=/dev/kvm

    steps:
    - name: Setup PATH
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Checkout CI repository
      uses: actions/checkout@v4.1.7
      with:
        path: ci

    - name: Download the SPDK repository
      uses: actions/download-artifact@v4.1.8
      with:
        name: repo-spdk

    - name: Download the SPDK ABI repository
      uses: actions/download-artifact@v4.1.8
      with:
        name: repo-spdk-abi

    - name: Extract the SPDK repository
      run: |
        tar xzf spdk.tar.gz --strip 1
        tar xzf spdk-abi.tar.gz --strip 1

    - name: Restore qcow2 image from cache
      id: restore-qcow2
      uses: actions/cache/restore@v4
      with:
        path: ${{matrix.distro}}_x86_64.qcow2
        key: vm-image-${{matrix.distro}}_x86_64

    - name: Download VM Qcow2 image artifact
      uses: actions/download-artifact@v4.1.8
      if: hashFiles(format('{0}_x86_64.qcow2', matrix.distro)) == ''
      with:
        name: vm-image-${{matrix.distro}}_x86_64
        github-token: ${{ github.token }}
        run-id: ${{ fromJson(needs.select_vm_image.outputs.artifact_id)[ matrix.distro ] }}

    - name: qemu-guest, provision
      run: |
        cd ci/cijoe
        cijoe workflows/autorun_in_qemu.yaml guest_initialize guest_start guest_check tgz_transfer abi_transfer ci_configs_transfer tgz_unpack output_create \
        --config configs/qemuhost-with-guest-${{matrix.distro}}.toml \
        --output report_${{ matrix.workflow }}_prep_guest \
        --monitor

    - name: qemu-guest, ${{ matrix.workflow }}
      run: |
        cd ci/cijoe
        cijoe workflows/autorun_in_qemu.yaml ${{ matrix.workflow }} \
        --config configs/qemuhost-with-guest-${{matrix.distro}}.toml \
        --output report_${{ matrix.workflow }} \
        --monitor

    - name: qemu-guest, cleanup
      if: always()
      run: |
        cd ci/cijoe
        cijoe workflows/autorun_in_qemu.yaml output_listing retrieve_autorun_output \
        --config configs/qemuhost-with-guest-${{matrix.distro}}.toml \
        --output report_${{ matrix.workflow }}_cleanup \
        --monitor

    - name: qemu-guest, shutdown
      if: contains(runner.labels, 'self-hosted') || env.ACT == 'true'
      run: |
        cd ci/cijoe
        cijoe workflows/autorun_in_qemu.yaml guest_shutdown \
        --config configs/qemuhost-with-guest-${{matrix.distro}}.toml \
        --output report_${{ matrix.workflow }}_guest_shutdown \
        --monitor

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        path: /tmp/autorun_output
        name: common-job-${{ matrix.workflow }}

    - name: Upload Report
      uses: actions/upload-artifact@v4.4.0
      if: always()
      with:
        path: |
          ci/cijoe/report_${{ matrix.workflow }}
          ci/cijoe/report_${{ matrix.workflow }}_cleanup
          ci/cijoe/report_${{ matrix.workflow }}_prep_guest
        name: common-cijoe-${{ matrix.workflow }}
