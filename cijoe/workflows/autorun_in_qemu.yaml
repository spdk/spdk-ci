---
doc: |
  Create qemu guest, transfer SPDK .tgz source and invoke autorun

  * Create qemu guest, and start it, using a system_image
  * Transfer and unpack SPDK source to/in qemu guest
  * Create auto.conf for testing (unittest + nvme)
  * Invoke autorun.sh
  * Retrieve autorun output
  * Shut down qemu guest

steps:
- name: guest_initialize
  uses: qemu.guest_initialize
  with:
    system_image_name: fedora-40-x86_64
    guest_name: generic-bios-kvm-x86_64

- name: guest_start
  uses: qemu_guest_start_custom_nvme
  with:
    guest_name: generic-bios-kvm-x86_64

- name: guest_check
  run: |
    hostname
    uname -a

- name: tgz_transfer
  uses: core.put
  with:
    src: "{{ local.env.REPOSITORY_TARBALL_PATH }}"
    dst: /tmp/repository.tar.gz

- name: ci_tgz_transfer
  uses: core.put
  with:
    src: "{{ local.env.CI_REPOSITORY_TARBALL_PATH }}"
    dst: /tmp/ci_repository.tar.gz

- name: tgz_unpack
  run: |
    mkdir -p /opt/{spdk,ci}
    tar xzf /tmp/repository.tar.gz -C /opt/spdk
    tar xzf /tmp/ci_repository.tar.gz -C /opt/ci
    git config --global --add safe.directory /opt/spdk
    git config --global --add safe.directory /opt/ci

- name: autorun_unittest
  run: |
    mkdir -p /opt/output/unittest
    cp /opt/ci/cijoe/configs/autorun_configs/unittest.conf /tmp/auto.conf
    output_dir=/opt/output/unittest /opt/spdk/autorun.sh /tmp/auto.conf

- name: autorun_nvme
  run: |
    mkdir -p /opt/output/nvme
    cp /opt/ci/cijoe/configs/autorun_configs/nvme.conf /tmp/auto.conf
    output_dir=/opt/output/nvme /opt/spdk/autorun.sh /tmp/auto.conf

- name: output_listing
  run: |
    ls /opt
    ls /opt/output

- name: retrieve_autorun_output
  uses: core.get
  with:
    src: /opt/output
    dst: /tmp/autorun_output

- name: guest_shutdown
  run: |
    systemctl poweroff
